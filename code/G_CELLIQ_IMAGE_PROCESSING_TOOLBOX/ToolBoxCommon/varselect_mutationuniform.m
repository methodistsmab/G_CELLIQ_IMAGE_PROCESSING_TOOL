function mutationChildren = varselect_mutationuniform(parents,options,GenomeLength,FitnessFcn,state,thisScore,thisPopulation,mutationRate)
%VARSELECT_MUTATIONUNIFORM Mutation function for variable selection.
%   
%   This function is exactly the same as the built in mutationuniform
%   function, with a small tweak to ensure that children generated by
%   crossover contain a non-redundant set of variable indices, all of 
%   which are whole numbers.

%   Copyright 2003-2004 The MathWorks, Inc.

if(nargin < 8)
    mutationRate = 0.3; % default mutation rate
end

if(strcmpi(options.PopulationType,'doubleVector'))
    mutationChildren = zeros(length(parents),GenomeLength);
    for i=1:length(parents)
        child = thisPopulation(parents(i),:);
        % Each element of the genome has mutationRate chance of being mutated.
        mutationPoints = find(rand(1,length(child)) < mutationRate);
        % each gene is replaced with a value chosen randomly from the range.
        range = options.PopInitRange;
        % range can have one column or one for each gene.
        [r,c] = size(range);
        if(c ~= 1)
            range = range(:,mutationPoints);
        end   
        lower = range(1,:);
        upper = range(2,:);
        span = upper - lower;
        
        while 1
            child(mutationPoints) = lower + rand(1,length(mutationPoints)) .* span;
            child=floor(child);
            if size(child)==size(unique(child))
                break
            end
        end
        mutationChildren(i,:) = child;
    end
elseif(strcmpi(options.PopulationType,'bitString'))
    
    mutationChildren = zeros(length(parents),GenomeLength);
    for i=1:length(parents)
        child = thisPopulation(parents(i),:);
        mutationPoints = find(rand(1,length(child)) < mutationRate);
        child(mutationPoints) = ~child(mutationPoints);
        mutationChildren(i,:) = child;
    end
    
end
